name: MyApiApp CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run Tests
        run: dotnet test --no-build --configuration Release --verbosity normal

      - name: Publish Application
        run: dotnet publish -c Release -o ./publish

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        run: |
          cd $GITHUB_WORKSPACE  # Ensure in correct directory
          docker build -t myapiapp -f ./Dockerfile .

      - name: Scan Docker image
        uses: anchore/scan-action@v3
        with:
          image: "myapiapp:latest"
          fail-build: true
          severity-cutoff: high

      - name: Tag and Push Docker Image to ECR
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          docker tag myapiapp:latest ${{ secrets.ECR_REPO_URL }}:$TIMESTAMP
          docker push ${{ secrets.ECR_REPO_URL }}:$TIMESTAMP
          docker tag myapiapp:latest ${{ secrets.ECR_REPO_URL }}:latest
          docker push ${{ secrets.ECR_REPO_URL }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster my-cluster --service myapiapp-service --force-new-deployment

      - name: Verify Deployment
        run: |
          aws ecs wait services-stable --cluster my-cluster --services myapiapp-service
          echo "Deployment completed successfully"
